// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecases

import (
	"context"
	"github.com/matheusmosca/arch-experiment/domain/entities"
	"sync"
)

// Ensure, that ticketRepoGetTicketUCMock does implement ticketRepoGetTicketUC.
// If this is not the case, regenerate this file with moq.
var _ ticketRepoGetTicketUC = &ticketRepoGetTicketUCMock{}

// ticketRepoGetTicketUCMock is a mock implementation of ticketRepoGetTicketUC.
//
//	func TestSomethingThatUsesticketRepoGetTicketUC(t *testing.T) {
//
//		// make and configure a mocked ticketRepoGetTicketUC
//		mockedticketRepoGetTicketUC := &ticketRepoGetTicketUCMock{
//			GetTicketByIDFunc: func(ctx context.Context, id string) (entities.Ticket, error) {
//				panic("mock out the GetTicketByID method")
//			},
//		}
//
//		// use mockedticketRepoGetTicketUC in code that requires ticketRepoGetTicketUC
//		// and then make assertions.
//
//	}
type ticketRepoGetTicketUCMock struct {
	// GetTicketByIDFunc mocks the GetTicketByID method.
	GetTicketByIDFunc func(ctx context.Context, id string) (entities.Ticket, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTicketByID holds details about calls to the GetTicketByID method.
		GetTicketByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockGetTicketByID sync.RWMutex
}

// GetTicketByID calls GetTicketByIDFunc.
func (mock *ticketRepoGetTicketUCMock) GetTicketByID(ctx context.Context, id string) (entities.Ticket, error) {
	if mock.GetTicketByIDFunc == nil {
		panic("ticketRepoGetTicketUCMock.GetTicketByIDFunc: method is nil but ticketRepoGetTicketUC.GetTicketByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTicketByID.Lock()
	mock.calls.GetTicketByID = append(mock.calls.GetTicketByID, callInfo)
	mock.lockGetTicketByID.Unlock()
	return mock.GetTicketByIDFunc(ctx, id)
}

// GetTicketByIDCalls gets all the calls that were made to GetTicketByID.
// Check the length with:
//
//	len(mockedticketRepoGetTicketUC.GetTicketByIDCalls())
func (mock *ticketRepoGetTicketUCMock) GetTicketByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetTicketByID.RLock()
	calls = mock.calls.GetTicketByID
	mock.lockGetTicketByID.RUnlock()
	return calls
}
